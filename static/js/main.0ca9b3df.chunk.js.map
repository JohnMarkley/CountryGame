{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","countries","randomCountry","randomChoices","userWin","correctGuess","disableFieldset","bgColor","backgroundColor","getRandomCountry","bind","assertThisInitialized","checkWin","_this2","fetch","then","data","json","setState","random","Math","floor","name","randomOpt","includes","push","sort","e","_this3","target","value","setTimeout","console","log","_this4","react_default","a","createElement","className","type","id","onClick","src","flag","alt","disabled","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ca9b3df.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n\n  constructor(...args){\n    super(...args);\n    this.state = {\n      countries:[],\n      randomCountry: {},\n      randomChoices: [],\n      userWin: '',\n      correctGuess: 0,\n      disableFieldset: false,\n      bgColor: {backgroundColor: '#81ecec'} //Light Blue (Background Colour)\n    }\n    this.getRandomCountry = this.getRandomCountry.bind(this);\n    this.checkWin = this.checkWin.bind(this);\n  }\n  componentDidMount() {\n    const apiUrl = \"https://restcountries.eu/rest/v2/all\";\n    fetch(apiUrl)\n    .then(data => data.json())\n    .then(countries => this.setState({countries}))\n    .then(this.getRandomCountry)\n}\n\n  getRandomCountry() {\n    const random = this.state.countries[Math.floor(Math.random()*this.state.countries.length)];\n    let randomChoices = [random.name];\n    while(randomChoices.length < 4){\n      const randomOpt = this.state.countries[Math.floor(Math.random()*this.state.countries.length)]\n      if(!randomChoices.includes(randomOpt.name)){\n        randomChoices.push(randomOpt.name);\n      }\n    }\n    randomChoices.sort(() => { return 0.5 - Math.random() });\n    this.setState({\n        randomCountry: random,\n        randomChoices: randomChoices,\n        userWin: '',\n        disableFieldset: false\n    })\n}\n\n  checkWin(e){\n    this.setState({\n      disableFieldset: true\n    })\n    const winCountry = this.state.randomCountry.name;\n    const userGuess = e.target.value;\n    if(winCountry == userGuess){\n      this.setState({\n        userWin: 'Win',\n        correctGuess: this.state.correctGuess + 1,\n        bgColor: {backgroundColor: '#55efc4'} //Light Green (Correct Colour)\n      })\n    }else{\n      this.setState({\n        userWin: 'Lose',\n        bgColor: {backgroundColor: '#ff7675'} //Light Pink (Wrong Colour)\n      })\n    }\n\n    setTimeout(()=>{\n      this.getRandomCountry();\n      this.setState({\n        userWin: '',\n        disableFieldset: false,\n        bgColor: {backgroundColor: '#81ecec'} //Light Blue (Background Colour)\n      })\n      console.log(e.target)\n    }, 2000)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Guess The Country</h1>\n          <button type=\"button\" id=\"buttonRandom\" className=\"btn btn-info\" onClick={this.getRandomCountry}>Random</button>\n          <div className=\"img-container\">\n            <img className=\"flag\" src={this.state.randomCountry.flag} alt=\"Country flag\"/>\n          </div>\n\n          <h2>{this.state.userWin == 'Win'? 'You guessed correctly! ' : ''}\n                 {this.state.userWin == 'Lose'? 'You guessed incorrectly! ' : ''}\n                 Score: {this.state.correctGuess}</h2>\n\n                 <fieldset disabled={this.state.disableFieldset}>\n                   <form onClick={e => this.checkWin(e)}>\n                     <button className=\"btn btn-info\" value={this.state.randomChoices[0]}>{this.state.randomChoices[0]}</button>\n                     <button className=\"btn btn-info\" value={this.state.randomChoices[1]}>{this.state.randomChoices[1]}</button>\n                     <button className=\"btn btn-info\" value={this.state.randomChoices[2]}>{this.state.randomChoices[2]}</button>\n                     <button className=\"btn btn-info\" value={this.state.randomChoices[3]}>{this.state.randomChoices[3]}</button>\n                   </form>\n                 </fieldset>\n                 <div className=\"backgroundFix\" style={this.state.bgColor}> </div>\n        </div>\n  </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}